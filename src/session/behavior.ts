import { MessageStream } from './stream'
/** An interface that describes a behavior. */
export interface IBehavior {
    /**
     * determines whether the session should be created or not
     * @param ctx the context
     */
    match(ctx: any): boolean
    /**
     * the function for generating sessions
     * @param stream the stream for contexts matches the session id
     */
    session(stream: MessageStream): Promise<void>
    /** 
     * Only avaliable in class Multi
     * A unique symbol of the Behavior
     * Behavior writers shouldn't specify this
     * as it'll be generated by the SessionManager.
     */
    symbol?: symbol
    /** 
     * Only avaliable in class Single
     * determines when the condition is matched,
     * whether to force end the previous session (true) 
     * or ignore this context (false or not determined) 
     */
    override?: boolean
}
